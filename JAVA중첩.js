중첩 클래스 - 인스턴스 멤버 클래스, 정적 멤버 클래스, 로컬 클래스
컴파일 시 중첩클래스에도 하나의 바이트코드 파일이 생성됨.
인스턴스,정적 멤버 클래스 = 바깥클명 $ 멤버클명.class
로컬 클래스 = 바깥클명 $1[번호] 로컬클명.class
--------------------------------------------------------------------------------
인스턴스 멤버 클래스
[접근제한자] class 클명A {
    [public | private | default] class 클명B {}
    클명B 객체명 = new 클명B(); //클래스 내부이기 때문에 바로 생성가능.
}
외부에서 클명B를 사용하려면
클명A 객체명A = new 클명A();
**클명A.클명B 객체명B = 객체명A.new 클명B();** //인스턴스 멤버 클래스이기때문에 클명A의 인스턴스가 있어야만 클명B의 객체를 생성할 수 있음.
--------------------------------------------------------------------------------
정적 멤버 클래스
[접근제한자] class 클명A {
    [public | private | default] static class 클명B {}
    static 클명B 객체명 = new 클명B(); //static int a = 10; 이렇게 만드는것처럼 정적필드로 객체를 만들 수가 있는 것.
    static 리턴타입 메소드명(){
      클명B 객체명 = new 클명B(); //static 클래스이기 때문에 static 메서드 안에서 만들 수가 있다.
    }
}
외부에서 사용하기 위해서
**클명A.클명B 객체명 = new 클명A.클명B();** //클명A의 객체를 생성할 필요없음.
--------------------------------------------------------------------------------
로컬 클래스 - 생성자 | 메소드 안에서만 사용 가능한 클래스
**생성자 | 메서드 안에서만 사용되기때문에 값에 접근할 수 없어서 [접근제한자]를 붙이지 않는다.
[접근제한자] class 클명A {
    //생성자
    [접근제한자] 클명A() {
        class 클명B{
            //인스턴스 필드
            //정적 필드 //java17부터
            //생성자
            //인스턴스 메서드
            //정적 메서드 //java17부터
        }
    }
    //메소드
    [접근제한자] 리턴타입 메서드명(){
        class 클명B{}
    }
}
**로컬 클래스에서 사용되는 로컬변수 or 매개변수(인스턴스변수 아님)는 값을 변경할 수 없다.** - 읽기전용 java7까지는 final을 붙였어야함.
--------------------------------------------------------------------------------
바깥 멤버 접근
인스턴스 멤버 클래스는 바깥 클래스의 모든 필드와 메서드
정적 멤버 클래스는 바깥 클래스의 정적 필드와 정적 메서드

**바깥 클래스의 객체 접근**
this = 객체 자기 자신을 가리킴.
[접근제한자] class 클명A {
    [접근제한자] 리턴타입 메서드명1(){}
    [public | private | default] class 클명B {
        [접근제한자] 리턴타입 메서드명1(){} //동일한 이름의 메서드
        메서드명1(); //클명B의 메서드명1 호출
        this.메서드명1(); //클명 B의 메서드명1 호출
        클명A.this.메서드명1(); //클명A의 메서드명1 호출
    }
}
