1장
(데이터 -> 가공 -> 정보)로 만드는 기술 : IT(information Technology)
컴퓨터 : H/W + S/W
S/W : 응용 프로그램 + 시스템 S/W
응용 프로그램 : 특정 작업을 위해 사용하는 프로그램(ex : MS 워드, 곰플레이어)
시스템 S/W : 컴퓨터 H/W, 응용 프로그램을 관리하기 위한 S/W(ex : OS, 유틸리티)
OS : 컴퓨터 전체를 관리하고 운영하는 S/W - 모든 S/W 위에 존재하는 최고의 S/W
                                       - 컴퓨터 자원을 효율적으로 관리하는 S/W
                                       - S/W와 H/W의 특성을 모두 갖춘 형태로 운영 = 펌웨어(Firmware)
                                       - 커널 + 인터페이스
커널 : OS의 핵심 기능을 모아놓은 것. - 모든 컴퓨터 자원을 관리, 따라서 사용자 or 응용 프로그램은 커널을 통해서만 컴퓨터 자원에 접근 가능

----- OS의 역할
1. 자원 관리 - 효율성 : 운영체제 크기 최소화, 운영체제가 사용하는 코드 최적화
2. 자원 보호 - 안정성 : 결함포용(시스템 문제 발생 시 이전으로 복구하는 기술) 수행해야함
3. H/W 인터페이스 제공 - 확장성 : 
4. UI 제공 - 편리성

----- OS의 발전
하드와이어링 -> 일괄작업시스템(CPU, 메인메모리) -> 대화형시스템 -> 시분할시스템(멀티프로그래밍) -> 분산시스템 -> 클라이언트/서버 시스템 -> P2P 시스템(블록체인) 
  -> 그리드 컴퓨팅 시스템 -> 클라우드 컴퓨팅 -> 사물 인터넷
     : 여러 곳에 떨어진 컴퓨팅 파워 or S/W를    - S/W업글 or 설정변경 등을 무선으로 배포하는 기술 : OTA(over The Air)     
       하나로 묶어 하나의 컴퓨터 처럼 사용하는 기술

--시분할 시스템
타임슬라이스 or 타임퀀텀 : CPU의 사용 시간을 잘게 나눈 한 조각
멀티프로그래밍 수준 or 멀티프로그래밍 정도 : 시분할 시스템에서 동시에 실행되는 작업의 개수
단점 : 사용자의 메모리를 정리하는 추가 작업 필요 / 많은 양의 작업 공존 시, 중요 작업 일정 시간 내 끝나는 것 보장 X
                                                    -> 실시간 시스템 등장 : 특정 시스템에서 일정 시간 안에 작업이 처리되도록 보장하는 시스템
                                                                    종류 1. 경성실시간시스템(hard real time system) / 2. 연성실시간시스템(soft real time system)
-> 하나의 컴퓨터에서 여러 사람이 동시에 작업할 수 있는 시스템의 등장
   : 다중 사용자 시스템 ex) 유닉스

----- OS의 구성
OS : 커널 + 인터페이스
   - 커널 : 프로세스 관리, 메모리 관리 등 OS의 핵심 기능을 구현한 프로그램
          - 커널과 인터페이스는 분리되어 있음 -> 같은 커널에 다른 인터페이스 사용 가능
          - 종류 : 유닉스 계열 커널, 윈도우 계열 커널
          - 커널 내부에 "시스템 호출" 과 "드라이버" 존재
                       - 시스템 호출 : 커널이 제공하는 시스템 자원을 사용하기 위한 함수 - 자원보호
                                    - 유사 용어 1. 응용프로그램인터페이스(API), 시스템개발자용키트(SDK ex)안드로이드 스튜디오)
                       - 드라이버(디바이스 드라이버) : 커널과 H/W의 인터페이스.
                                                   - 커널이 제공하는 드라이버 + H/W 제작자가 제공하는 드라이버
-- 커널의 역할과 종류
커널의 가장 중요한 작업 : 여러 응용 프로그램을 실행하는 것
- 핵심 기능 5가지
  1. 프로세스 관리 : 프로세스에 CPU를 배분하고, 작업에 필요한 제반 환경 제공
  2. 메모리 관리 : 프로세스에 작업 공간을 배치하고, 실제 메모리보다 큰 가상 공간 제공
  3. 파일 시스템 관리 : 데이터를 저장하고, 접근 가능한 인터페이스 제공
  4. 입출력 관리 : 필요한 입력, 출력 서비스 제공
  5. 프로세스 간 통신 관리 : 공동 작업을 위한 각 프로세스 간 통신 환경 지원

-- 종류
1. 단일형 구조 커널 - 초창기 OS 구조
                   - 핵심 기능 구현 모듈이 구분없이 하나로 구성 ex) MS-DOS, VMS, 초창기 유닉스
                   - 장점 : 모듈 분리 X -> 속도 fast
                   - 단점 1. 모든 모듈 하나로 묶임 -> 버그 or 오류 처리 hard
                          2. OS의 여러 기능이 서로 연결 -> 상호 의존성 ↑ -> 기능 상의 작은 결함 -> 시스템 전체 확산 가능
                          3. 다양한 환경의 시스템에 적용 hard
                          4. 현대의 OS 에선 불가능
2. 계층형 구조 커널 - 단일형 구조 커널의 발전형
                   - 비슷한 기능의 모듈들을 하나로 묶어 계층화 후 계층 간의 통신을 통해 OS 구현 ex) 윈도우
                   - 장점 : 버그 or 오류 처리 한층 나아짐
3. 마이크로 구조 커널 - 프로세스 관리, 메모리 관리 등 가장 기본적인 기능만 제공.
                     - OS의 많은 부분이 사용자 영역에 구현되어짐.
                     - 커널은 메모리 관리와 프로세스 간의 동기화 서비스를 제공하며, 메모리 관리와 동기화 모듈은 프로세스 간 통신 모듈로 연결되어있음
                       -> 그러므로 각 모듈은 세분화되어 존재하고, 모듈 간 정보 교환은 프로세스 간 통신으로 이루어짐.
                     - 장점 1. 모듈은 독립적으로 동작 -> 하나의 모듈이 실패 -> 전체 OS 작동 stop X
                            2. 커널이 이식하기 쉽고 가벼움 -> CPU 용량이 작은 시스템에도 적용 가능 ex) 마하

----- 가상머신 
C 언어는 저급언어의 기능 존재 -> 시스템 프로그래밍 언어로 적합.
                            - 대표적인 ex) 유닉스
but 윈도우와 같이 다른 커널의 OS와의 호환성 ↓
     -> 호환성 해결 언어 : Java
              -> 어떻게? 가상머신! : OS와 응용프로그램 사이에서 작동하는 프로그램(JVM)
                                  - 단점 : 가상머신을 통하기 때문에 응용프로그램의 속도 ↓.
