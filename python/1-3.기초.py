----- 함수
- 정의법
def 함수명([매개변수1, ...]):
  ~~~~
  [return ~]
   return ~, ~ -> 튜플형식으로 return
--- 기본값
def 함수명(매개변수1 = 17, ...): #값이 안들어오면 기본값으로 설정
--- 키워드값
def 함수명(name, age): 일때
함수명(age=17, name="유재석") 으로 함수호출 가능
--- 가변인자 *
def 함수명(매개변수1, *가변매개변수):

----- 지역변수와 전역변수
ex)
gun = 10
def checkpoint(soldiers):
  global gun #전역공간의 gun을 사용, 권장X -> 매개변수로 넘겨서 사용하는 것을 권장
  gun = gun - soldiers
  #으로 사용해야 오류 발생 X

----- 표준입출력
1. print("python", "java", sep="둘(이상) 사이에 쓸 문자")
2. print("안녕", end=" ") - 큰따옴표 안의 문자를 끝에 쓰고, 다음 print문을 다음줄로 넘기지 않고 연속 출력
3. print("하이", file=sys.stdout)
                 file=sys.stderr) - 에러 로깅 처리시 사용
4. print(문자열.ljust(칸수), 문자열.rjust(칸수))
5. print(문자열.zfill(칸수)) - 칸수만큼 크기 만들고 빈칸은 0으로 채움
--- 입력
input("입력하세요 : ")
int(input("입력하세요 : "))

----- 다양한 출력 포맷
# 빈자리 빈공간, 오른쪽 정렬, 총 10자리 확보
1. print("{0: >10}" .format(500))
# 양수 시 +, 음수 시 - 표시
2. print("{0: >+10}" .format(500)) -> +500 출력
                             -500 이면 -500 출력
# 왼쪽 정렬, 빈칸 _로 채움
3. print("{0:_<10}" .format(500))
# 3자리마다 , 찍기
4. print("{0:,}".format(1000000000))
# 3자리마다 콤마 및 + - 도 붙이기
5. print("{0:+,}".format(1000000000))
# 3자리마다 콤마 및 부호 및 자리수 확보, 빈자리 ^ 표시
6. print("{0:^<+30,}".format(100000000))
# 소수점 출력
7. print("{0:f}".format(5/3))
# 소수점 특정 자리수 까지만 표시 
8. print("{0:.2f}".format(5/3)) - 소수점 3번째에서 반올림

----- 파일 입출력
--- 파일 열기-없으면 만듬  쓰기목적
파일변수명 = opne("파일명", "w", encoding="utf8")
--- 파일에 쓰기
1. print("안녕", file=파일변수명) - 줄 바꿈 됨
2. 파일변수명.write("내용") - 줄바꿈 안됨 \n 써주기
--- 파일읽기
1. 파일변수명.read() - 파일 내 모든 내용 읽어옴
2. 파일변수명.readline() - 한줄 읽고, 커서는 다음줄로 이동
- 몇줄인지 모를때
while True:
  line = 파일변수명.readline()
  if not line: break
--- 파일닫기(필수)
파일변수명.close()
--- 목적
1. "w" : 덮어쓰기
2. "a" : 이어쓰기
3. "r" : 읽기전용

